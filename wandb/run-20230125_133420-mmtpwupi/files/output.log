
 Loss: 0.2526
 Loss: 0.2634
 Loss: 0.0011
 Loss: 0.2652
 Loss: 0.1471
 Loss: 0.0677
 Loss: 0.0490
 Loss: 0.0898
 Loss: 0.0641
 Loss: 0.0472
 Loss: 0.0804
 Loss: 0.0703
Accuracy of 0: 100.0 %
Accuracy of 1: 100.0 %
Accuracy of 2: 100.0 %
Accuracy of 3: 100.0 %
accurcy :1.0 %
test
Accuracy of 0: 100.0 %
Accuracy of 1: 99.87468671679198 %
Accuracy of 2: 99.49811794228356 %
Accuracy of 3: 99.24528301886792 %
accurcy :0.9965408444404602 %
Model's state_dict:model_25_Jan_2023_11:34.pt
optimizer's state_dict:optimizer_25_Jan_2023_11:34.pt
accuracys state dict : accuracy_25_Jan_2023_11:34.txt
 Loss: 0.4484
 Loss: 0.0004
 Loss: 0.0004
 Loss: 0.0084
 Loss: 0.1258
 Loss: 0.0716
 Loss: 0.0956
 Loss: 0.2527
 Loss: 0.1074
 Loss: 0.1283
Traceback (most recent call last):
  File "/home/robotics20/Documents/rotem/main.py", line 156, in <module>
    main(args_config, device)
  File "/home/robotics20/Documents/rotem/main.py", line 116, in main
    model, optimizer = Run_model.train_epoch(epoch=epoch, model=model, train_loader=train_loader
  File "/home/robotics20/Documents/rotem/Run_model.py", line 17, in train_epoch
    loss = criterion(outputs, labels)
  File "/home/robotics20/anaconda3/envs/rotem/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/robotics20/anaconda3/envs/rotem/lib/python3.10/site-packages/torch/nn/modules/loss.py", line 1174, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "/home/robotics20/anaconda3/envs/rotem/lib/python3.10/site-packages/torch/nn/functional.py", line 3026, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
